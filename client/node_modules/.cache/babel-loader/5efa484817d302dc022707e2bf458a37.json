{"ast":null,"code":"import _objectSpread from \"/Users/amberjones/Desktop/Workspace/Chat_App-MERN/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux'; //! Check form validation\n\nexport const setAlert = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_ALERT':\n      return [...state, action.payload];\n\n    case 'REMOVE_ALERT':\n      return state.filter(alert => alert.id !== action.payload);\n\n    default:\n      return state;\n  }\n}; //!AUTH\n\nconst authInitialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  loading: true,\n  user: null\n};\nexport const authFunc = (state = authInitialState, action) => {\n  switch (action.type) {\n    case \"USER_LOADED\":\n      return _objectSpread({}, state, {\n        isAuthenticated: true,\n        loading: false,\n        user: action.payload\n      });\n\n    case 'REGISTER_SUCCESS':\n    case \"LOGIN_SUCCESS\":\n      localStorage.setItem('token', action.payload.token);\n      return _objectSpread({}, state, action.payload, {\n        isAuthenticated: true,\n        loading: false\n      });\n\n    case 'REGISTER_FAIL':\n    case \"AUTH_ERROR\":\n    case \"LOGIN_FAIL\":\n    case \"LOGOUT\":\n    case \"ACCOUNT_DELETED\":\n      localStorage.removeItem('token');\n      return _objectSpread({}, state, {\n        token: null,\n        isAuthenticated: false,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}; //! PROFILE REDUCER\n\nconst profileState = {\n  profile: null,\n  profiles: [],\n  repos: [],\n  loading: true,\n  error: {}\n};\nexport const getCurrentProfile = (state = profileState, action) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case \"GET_PROFILE\":\n    case \"UPDATE_PROFILE\":\n      return _objectSpread({}, state, {\n        profile: payload,\n        loading: false //PLURAL\n\n      });\n\n    case \"GET_PROFILES\":\n      return _objectSpread({}, state, {\n        profiles: payload,\n        loading: false\n      });\n\n    case \"PROFILE_ERROR\":\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case \"CLEAR_PROFILE\":\n      return _objectSpread({}, state, {\n        profile: null,\n        repos: [],\n        loading: false\n      });\n\n    case \"GET_REPOS\":\n      return _objectSpread({}, state, {\n        repos: payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}; //! This is for post\n\nconst postInitialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport const getPosts = (state = postInitialState, action) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case \"GET_POSTS\":\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case \"DELETE_POST\":\n      return _objectSpread({}, state, {\n        posts: state.post.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case \"POST_ERROR\":\n      return {\n        error: payload,\n        loading: false\n      };\n\n    case \"UPDATE_LIKES\":\n      debugger;\n      return _objectSpread({}, state, {\n        posts: payload.currentPosts.map(post => post._id === payload._id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n}; //! EVENTBRITE\n\nexport const getRuns = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_RUNS\":\n      return state.concat(action.value);\n\n    default:\n      return state;\n  }\n};\n\nconst location = (state = [], action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nconst posts = state => state;\n\nexport default combineReducers({\n  alert: setAlert,\n  register: authFunc,\n  getCurrentProfile,\n  getPosts,\n  runDATA: getRuns,\n  location,\n  posts\n});","map":{"version":3,"sources":["/Users/amberjones/Desktop/Workspace/Chat_App-MERN/client/src/redux/reducers/Reducers.js"],"names":["combineReducers","setAlert","state","action","type","payload","filter","alert","id","authInitialState","token","localStorage","getItem","isAuthenticated","loading","user","authFunc","setItem","removeItem","profileState","profile","profiles","repos","error","getCurrentProfile","postInitialState","posts","post","getPosts","_id","currentPosts","map","likes","getRuns","concat","value","location","register","runDATA"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\n\n\n//! Check form validation\nexport const setAlert = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_ALERT':\n      return [...state, action.payload];\n    case 'REMOVE_ALERT':\n      return state.filter(alert => alert.id !== action.payload);\n    default:\n      return state;\n  }\n}\n\n//!AUTH\nconst authInitialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  loading: true,\n  user: null\n}\n\nexport const authFunc = (state = authInitialState, action) => {\n  switch(action.type){\n    case `USER_LOADED`:\n    return {\n      ...state,\n      isAuthenticated: true,\n      loading: false,\n      user: action.payload\n    }\n    case 'REGISTER_SUCCESS': \n    case `LOGIN_SUCCESS`:\n      localStorage.setItem('token', action.payload.token)\n      return {\n        ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        loading: false\n      };\n    case 'REGISTER_FAIL':\n    case `AUTH_ERROR`:\n    case `LOGIN_FAIL`:\n    case `LOGOUT`:\n    case `ACCOUNT_DELETED`:\n      localStorage.removeItem('token')\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false\n      }\n    default:\n      return state\n  }\n}\n\n//! PROFILE REDUCER\nconst profileState = {\n  profile: null,\n  profiles: [],\n  repos: [],\n  loading: true,\n  error: {}\n}\nexport const getCurrentProfile = (state = profileState, action) => {\n  const { type, payload } = action\n  switch(type){\n    case `GET_PROFILE`: \n    case `UPDATE_PROFILE`:\n    return {\n      ...state,\n      profile: payload,\n      loading: false\n    }\n    //PLURAL\n    case `GET_PROFILES`: \n    return {\n      ...state,\n      profiles: payload,\n      loading: false\n    }\n    case `PROFILE_ERROR`:\n    return {\n      ...state,\n      error: payload,\n      loading: false\n    }\n    case `CLEAR_PROFILE`:\n    return {\n      ...state,\n      profile: null,\n      repos: [],\n      loading: false\n    }\n    case `GET_REPOS`: \n    return {\n      ...state,\n      repos: payload,\n      loading: false\n    }\n    default: \n    return state\n  }\n}\n\n\n//! This is for post\nconst postInitialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n}\n\nexport const getPosts = (state= postInitialState, action) => {\n  const { type, payload } = action\n  switch(type){\n    case `GET_POSTS`: \n    return {\n      ...state,\n      posts: payload,\n      loading: false\n    }\n    case `DELETE_POST`: \n    return {\n      ...state,\n      posts: state.post.filter(post => post._id !== payload),\n      loading: false\n    }\n    case `POST_ERROR`:\n    return {\n      error: payload,\n      loading: false\n    }\n    case `UPDATE_LIKES`:\n    debugger\n      return {\n        ...state,\n        posts: payload.currentPosts.map(post =>\n          post._id === payload._id ? { ...post, likes: payload.likes } : post),\n        loading: false\n      };\n    default: return {\n    ...state\n    }\n  }\n}\n\n\n//! EVENTBRITE\nexport const getRuns = (state= [], action) => {\n  switch(action.type){\n    case \"SET_RUNS\":\n    return state.concat(action.value);\n    default: \n    return state\n  }\n}\nconst location = (state=[], action) => {\n  switch(action.type){\n    default: return state\n  }\n}\n\nconst posts = (state) => state\n\n\nexport default combineReducers({\n  alert: setAlert,\n  register: authFunc,\n  getCurrentProfile,\n  getPosts,\n  runDATA: getRuns,\n  location,\n  posts\n})\n\n\n"]},"metadata":{},"sourceType":"module"}