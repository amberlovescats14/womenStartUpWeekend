{"ast":null,"code":"import uuid from 'uuid';\nimport axios from 'axios';\nimport settingAuthToken from '../../util/setAuthToken';\nexport const setAlert = (msg, alertType, timeout = 2000) => dispatch => {\n  const id = uuid.v4();\n  dispatch({\n    type: 'SET_ALERT',\n    payload: {\n      msg,\n      alertType,\n      id\n    }\n  });\n  setTimeout(() => dispatch({\n    type: \"REMOVE_ALERT\",\n    payload: id\n  }), timeout);\n}; //THIS IS WHAT its going to look like\n//   {\n//     id: 1,\n//     msg:`Passwords donnot match`,\n//     alertType: `Danger`\n//   }\n//!AUTH\n// REGISTER_SUCCESS \n// REGISTER_FAIL\n\nexport const authFunc = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: \"REGISTER_SUCCESS\",\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: \"REGISTER_FAIL\"\n    });\n  }\n}; //!actions AUTH\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    settingAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: \"USER_LOADED\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"AUTH_ERROR\"\n    });\n  }\n}; //LOGIN USER\n\nexport const loginFunc = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: \"LOGIN_FAIL\"\n    });\n  }\n}; //!LOG_OUT && CLEAR token and profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: \"LOGOUT\"\n  });\n  dispatch({\n    type: \"CLEAR_PROFILE\"\n  });\n}; //!GETTING PROFILE \n//This will get the current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: \"GET_PROFILE\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! GET ALL PROFILES\n\nexport const getProfiles = () => async dispatch => {\n  //clear all before seeing all profiles\n  dispatch({\n    type: \"CLEAR_PROFILE\"\n  });\n\n  try {\n    const res = await axios.get('/api/profile'); //PLURAL PROFILES\n\n    dispatch({\n      type: \"GET_PROFILES\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! GET PROFILE BY ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/user/\".concat(userId)); //PLURAL PROFILES\n\n    dispatch({\n      type: \"GET_PROFILE\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! GET GITHUB REPOS\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/github/\".concat(username)); //PLURAL PROFILES\n\n    dispatch({\n      type: \"GET_REPOS\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! CREATES OR UPDATES THE CURRENT PROFILE\n// This action takes in history so that we can redirect after editing or creating and set the false value to know when to redirect\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } //post request to api/profile\n\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    console.log(\"RES\", res.data);\n    dispatch({\n      type: \"GET_PROFILE\",\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? \"Profile Updated!\" : \"Profile Created!\", 'success')); //Only if we are creating a new profile will we redirect. Not editing\n    //! This started out as if !edit but I had to change it to edit  because Im sending in true at the end\n\n    if (edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    //This will check if we forgot the fields\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //!PROFILE ACTION\n//!Add experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } //post request to api/profile\n\n    };\n    const res = await axios.put('/api/profile/experience', formData, config);\n    console.log(\"RES\", res.data);\n    dispatch({\n      type: \"UPDATE_PROFILE\",\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added.', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    //This will check if we forgot the fields & set errors\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //!PROFILE ACTION\n//! add education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } //post request to api/profile\n\n    };\n    const res = await axios.put('/api/profile/education', formData, config);\n    console.log(\"RES\", res.data);\n    dispatch({\n      type: \"UPDATE_PROFILE\",\n      payload: res.data\n    });\n    dispatch(setAlert('Team Added.', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    //This will check if we forgot the fields & set errors\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //!DELETE EXPERIENCE\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/profile/experience/\".concat(id));\n    dispatch({\n      type: \"UPDATE_PROFILE\",\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! DELETE EDUCATION\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/profile/education/\".concat(id));\n    dispatch({\n      type: \"UPDATE_PROFILE\",\n      payload: res.data\n    });\n    dispatch(setAlert('Team Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: \"PROFILE_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //!DELETE FULL ACCOUNT!!!!\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This cannot be undone!')) {\n    try {\n      await axios.delete(\"/api/profile\");\n      dispatch({\n        type: \"CLEAR_PROFILE\"\n      });\n      dispatch({\n        type: \"ACCOUNT_DELETED\"\n      });\n      dispatch(setAlert('Your account has been deleted :('));\n    } catch (err) {\n      dispatch({\n        type: \"PROFILE_ERROR\",\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; //! getting posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: \"GET_POSTS\",\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"POST_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! ADDING A LIKE\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/like/\".concat(id));\n    dispatch({\n      type: \"UPDATE_LIKES\",\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: \"POST_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! REMOVE A LIKE\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n    dispatch({\n      type: \"UPDATE_LIKES\",\n      payload: JSON.stringify({\n        id,\n        likes: res.data\n      })\n    });\n  } catch (err) {\n    dispatch({\n      type: \"POST_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //! DELETE Post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: \"DELETE_POST\",\n      payload: {\n        id\n      }\n    });\n    dispatch(setAlert(\"Post Removed\", 'success'));\n  } catch (err) {\n    dispatch({\n      type: \"POST_ERROR\",\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //!EVENTBRITE get runs\n\nexport const getRuns = users => {\n  return dispatch => {\n    fetch('https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.address=6307+Donely+pl%2C+san+antonio%2Ctx&location.within=20mi&categories=108&subcategories=8001&start_date.range_start=2019-08-01T01%3A01%3A00Z&start_date.range_end=2019-08-31T01%3A01%3A00Z&token=KXBIEIL3SS3GWKDXSU7F').then(response => response.json()).then(runs => {\n      dispatch({\n        type: \"SET_RUNS\",\n        value: runs.events\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/amberjones/Desktop/Workspace/Chat_App-MERN/client/src/redux/actions/Actions.js"],"names":["uuid","axios","settingAuthToken","setAlert","msg","alertType","timeout","dispatch","id","v4","type","payload","setTimeout","authFunc","name","email","password","config","headers","body","JSON","stringify","res","post","data","loadUser","err","errors","response","forEach","error","localStorage","token","get","loginFunc","logout","getCurrentProfile","statusText","status","getProfiles","getProfileById","userId","getGithubRepos","username","createProfile","formData","history","edit","console","log","push","addExperience","put","addEducation","deleteExperience","delete","deleteEducation","deleteAccount","window","confirm","getPosts","addLike","likes","removeLike","deletePost","getRuns","users","fetch","then","json","runs","value","events"],"mappings":"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","sourcesContent":["import uuid from 'uuid'\nimport axios from 'axios'\nimport settingAuthToken from '../../util/setAuthToken'\n\n\nexport const setAlert = (msg, alertType, timeout = 2000) => dispatch => {\n  const id = uuid.v4();\n  dispatch({\n    type: 'SET_ALERT',\n    payload: {msg, alertType, id}\n  });\n  setTimeout(()=>  dispatch({\n    type: `REMOVE_ALERT`,\n    payload: id\n  }), timeout)\n}\n//THIS IS WHAT its going to look like\n//   {\n//     id: 1,\n//     msg:`Passwords donnot match`,\n//     alertType: `Danger`\n//   }\n\n//!AUTH\n// REGISTER_SUCCESS \n// REGISTER_FAIL\nexport const authFunc = ({name, email, password}) => async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const body = JSON.stringify({name, email, password})\n    try {\n      const res = await axios.post('/api/users', body, config)\n\n      dispatch({\n        type: `REGISTER_SUCCESS`,\n        payload: res.data\n      })\n      dispatch(loadUser())\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if(errors){\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n      }\n\n      dispatch({\n        type: `REGISTER_FAIL`\n      })\n    }\n\n}\n\n//!actions AUTH\nexport const loadUser = () => async dispatch => {\n  if(localStorage.token) {\n    settingAuthToken(localStorage.token)\n  }\n  try {\n    const res = await axios.get('/api/auth')\n\n    dispatch({\n      type: `USER_LOADED`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `AUTH_ERROR`\n    })\n  }\n}\n\n//LOGIN USER\nexport const loginFunc = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({email, password})\n  try {\n    const res = await axios.post('/api/auth', body, config)\n\n    dispatch({\n      type: `LOGIN_SUCCESS`,\n      payload: res.data\n    })\n    dispatch(loadUser())\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if(errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: `LOGIN_FAIL`\n    })\n  }\n\n}\n\n\n//!LOG_OUT && CLEAR token and profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: `LOGOUT`\n  })\n  dispatch({\n    type: `CLEAR_PROFILE`\n  })\n}\n\n//!GETTING PROFILE \n//This will get the current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me')\n    dispatch({\n      type: `GET_PROFILE`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n\n//! GET ALL PROFILES\nexport const getProfiles = () => async dispatch => {\n  //clear all before seeing all profiles\n  dispatch({\n    type: `CLEAR_PROFILE`\n  })\n\n  try {\n    const res = await axios.get('/api/profile')\n    //PLURAL PROFILES\n    dispatch({\n      type: `GET_PROFILES`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n//! GET PROFILE BY ID\nexport const getProfileById = (userId) => async dispatch => {\n  \n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`)\n    //PLURAL PROFILES\n    dispatch({\n      type: `GET_PROFILE`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//! GET GITHUB REPOS\nexport const getGithubRepos = (username) => async dispatch => {\n  \n  try {\n    const res = await axios.get(`/api/profile/github/${username}`)\n    //PLURAL PROFILES\n    dispatch({\n      type: `GET_REPOS`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n//! CREATES OR UPDATES THE CURRENT PROFILE\n// This action takes in history so that we can redirect after editing or creating and set the false value to know when to redirect\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    //post request to api/profile\n    const res = await axios.post('/api/profile', formData, config)\n    console.log(`RES`, res.data)\n    dispatch({\n      type: `GET_PROFILE`,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? `Profile Updated!` : `Profile Created!`, 'success'))\n\n    //Only if we are creating a new profile will we redirect. Not editing\n    //! This started out as if !edit but I had to change it to edit  because Im sending in true at the end\n    if(edit) {\n      history.push('/dashboard')\n    }\n  } catch (err) {\n  \n    //This will check if we forgot the fields\n    const errors = err.response.data.errors;\n    if(errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n} \n\n//!PROFILE ACTION\n//!Add experience\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    //post request to api/profile\n    const res = await axios.put('/api/profile/experience', formData, config)\n    console.log(`RES`, res.data)\n    dispatch({\n      type: `UPDATE_PROFILE`,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added.', 'success'))\n \n      history.push('/dashboard')\n    \n  } catch (err) {\n    //This will check if we forgot the fields & set errors\n    const errors = err.response.data.errors;\n    if(errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//!PROFILE ACTION\n//! add education\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    //post request to api/profile\n    const res = await axios.put('/api/profile/education', formData, config)\n    console.log(`RES`, res.data)\n    dispatch({\n      type: `UPDATE_PROFILE`,\n      payload: res.data\n    });\n    dispatch(setAlert('Team Added.', 'success'))\n \n      history.push('/dashboard')\n    \n  } catch (err) {\n    //This will check if we forgot the fields & set errors\n    const errors = err.response.data.errors;\n    if(errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//!DELETE EXPERIENCE\nexport const deleteExperience = (id) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`)\n\n    dispatch({\n      type: `UPDATE_PROFILE`,\n      payload: res.data\n    })\n\n    dispatch(setAlert('Experience Removed', 'success'))\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//! DELETE EDUCATION\n\nexport const deleteEducation = (id) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`)\n\n    dispatch({\n      type: `UPDATE_PROFILE`,\n      payload: res.data\n    })\n\n    dispatch(setAlert('Team Removed', 'success'))\n  } catch (err) {\n    dispatch({\n      type: `PROFILE_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//!DELETE FULL ACCOUNT!!!!\n\nexport const deleteAccount = () => async dispatch => {\n  if(window.confirm('Are you sure? This cannot be undone!')){\n    try {\n      await axios.delete(`/api/profile`)\n  \n      dispatch({\n        type: `CLEAR_PROFILE`,\n      })\n      dispatch({\n        type: `ACCOUNT_DELETED`\n      })\n  \n      dispatch(setAlert('Your account has been deleted :('))\n    } catch (err) {\n      dispatch({\n        type: `PROFILE_ERROR`,\n        payload: {msg: err.response.statusText, status: err.response.status}\n      })\n    }\n  }\n\n}\n\n//! getting posts\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts')\n\n    dispatch({\n      type: `GET_POSTS`,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: `POST_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//! ADDING A LIKE\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    \n    dispatch({\n      type: `UPDATE_LIKES`,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: `POST_ERROR`,\n      payload: { \n        msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n//! REMOVE A LIKE\nexport const removeLike = (id) => async dispatch => {\n  \n  try {\n\n    const res = await axios.put(`/api/posts/unlike/${id}`)\n    dispatch({\n      type: `UPDATE_LIKES`,\n      payload: JSON.stringify({\n        id,\n        likes: res.data\n      })\n    })\n  } catch (err) {\n    dispatch({\n      type: `POST_ERROR`,\n      payload: {msg: err.response.statusText, status: err.response.status}\n    })\n  }\n}\n\n//! DELETE Post\nexport const deletePost = id => async dispatch => {\n  try {\n     await axios.delete(`/api/posts/${id}`)\n\n    dispatch({\n      type: `DELETE_POST`,\n      payload: { \n        id\n        }\n    })\n    dispatch(\n      setAlert(`Post Removed`, 'success')\n    )\n  } catch (err) {\n    dispatch({\n      type: `POST_ERROR`,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    })\n  }\n}\n\n//!EVENTBRITE get runs\nexport const getRuns = (users) => {\n  return (dispatch) => {\n    fetch('https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.address=6307+Donely+pl%2C+san+antonio%2Ctx&location.within=20mi&categories=108&subcategories=8001&start_date.range_start=2019-08-01T01%3A01%3A00Z&start_date.range_end=2019-08-31T01%3A01%3A00Z&token=KXBIEIL3SS3GWKDXSU7F')\n    .then(response => response.json())\n     .then(runs => {\n       dispatch({\n         type: \"SET_RUNS\",\n         value: runs.events\n       })\n         \n         })\n  }\n}"]},"metadata":{},"sourceType":"module"}